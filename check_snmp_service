#!/bin/bash

# check_snmp_service
# Description : Check if a service is running
# Version : 1.1
# Author : Yoann LAMY
# Licence : GPLv2

# Commands
CMD_BASENAME="/usr/bin/basename"
CMD_SNMPGET="/usr/bin/snmpget"
CMD_SNMPWALK="/usr/bin/snmpwalk"
CMD_AWK="/usr/bin/awk"
CMD_EXPR="/usr/bin/expr"
CMD_GREP="/bin/grep"
CMD_WC="/usr/bin/wc"

# Script name
SCRIPTNAME=`$CMD_BASENAME $0`

# Version
VERSION="1.1"

# Plugin return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# 'hrSWRunIndex', HOST-RESOURCES-MIB
OID_SERVICE_INDEX=".1.3.6.1.2.1.25.4.2.1.1.1"

# 'hrSWRunName', HOST-RESOURCES-MIB
OID_SERVICE_NAME=".1.3.6.1.2.1.25.4.2.1.2"

# 'hrSWRunParameters', HOST-RESOURCES-MIB
OID_SERVICE_PARAMETERS=".1.3.6.1.2.1.25.4.2.1.5"

# Default variables
DESCRIPTION="Unknown"
STATE=$STATE_UNKNOWN
TEST=""
CODE=0

# Default options
COMMUNITY="public"
HOSTNAME="127.0.0.1"
SERVICE=""
PARAMETERS=""
WARNING=0
CRITICAL=0

# Option processing
print_usage() {
  echo "Usage: ./check_snmp_service -H 127.0.0.1 -C public -s Service -p Parameters -w 5 -c 10"
  echo "  $SCRIPTNAME -H ADDRESS"
  echo "  $SCRIPTNAME -C STRING"
  echo "  $SCRIPTNAME -s STRING"
  echo "  $SCRIPTNAME -p STRING"
  echo "  $SCRIPTNAME -w INTEGER"
  echo "  $SCRIPTNAME -c INTEGER"
  echo "  $SCRIPTNAME -h"
  echo "  $SCRIPTNAME -V"
}

print_version() {
  echo $SCRIPTNAME version $VERSION
  echo ""
  echo "This nagios plugins comes with ABSOLUTELY NO WARRANTY."
  echo "You may redistribute copies of the plugins under the terms of the GNU General Public License v2."
}

print_help() {
  print_version
  echo ""
  print_usage
  echo ""
  echo "Check if a service is running"
  echo ""
  echo "-H ADDRESS"
  echo "   Name or IP address of host (default: 127.0.0.1)"
  echo "-C STRING"
  echo "   Community name for the host's SNMP agent (default: public)"
  echo "-s STRING"
  echo "   Service's name"
  echo "-p STRING"
  echo "   Service's parameters"
  echo "-w INTEGER"
  echo "   Warning level for the number of service (default: 0)"
  echo "-c INTEGER"
  echo "   Critical level for the number of service (default: 0)"
  echo "-h"
  echo "   Print this help screen"
  echo "-V"
  echo "   Print version and license information"
  echo ""
  echo ""
  echo "This plugin uses the 'snmpget' command and the 'snmpwalk' command included with the NET-SNMP package."
  echo "This plugin support performance data output."
  echo "If the percentage of the warning and critical levels are set to 0, then the script returns a OK state."
}

while getopts H:C:s:p:w:c:hV OPT
do
  case $OPT in
    H) HOSTNAME="$OPTARG" ;;
    C) COMMUNITY="$OPTARG" ;;
    s) SERVICE="$OPTARG" ;;
    p) PARAMETERS="$OPTARG" ;;
    w) WARNING=$OPTARG ;;
    c) CRITICAL=$OPTARG ;;
    h)
      print_help
      exit $STATE_UNKNOWN
      ;;
    V)
      print_version
      exit $STATE_UNKNOWN
      ;;
   esac
done

# Plugin processing
TEST=`$CMD_SNMPGET -t 2 -r 2 -v 1 -c $COMMUNITY $HOSTNAME $OID_SERVICE_INDEX`

if [ -n "$TEST" ]; then
  if [ -n "$PARAMETERS" ]; then
    for ID in `$CMD_SNMPWALK -t 2 -r 2 -v 1 -c $COMMUNITY $HOSTNAME $OID_SERVICE_NAME | $CMD_GREP -i "${SERVICE}" | $CMD_AWK '{ print $1 }' | $CMD_AWK -F "." '{print $NF}'`
    do
      VALUE=`$CMD_SNMPWALK -t 2 -r 2 -v 1 -c $COMMUNITY $HOSTNAME "${OID_SERVICE_PARAMETERS}.${ID}" | $CMD_GREP -i "${PARAMETERS}"`
      if [ -z "$VALUE" ]; then
        VALUE=0
      else
        VALUE=1
      fi
      CODE=`$CMD_EXPR $CODE + $VALUE`
    done
  else
    CODE=`$CMD_SNMPWALK -t 2 -r 2 -v 1 -c $COMMUNITY $HOSTNAME $OID_SERVICE_NAME | $CMD_GREP -i "${SERVICE}" | $CMD_WC -l`
  fi

  if [ $CODE -gt 0 ]; then
    if [ $WARNING != 0 ] || [ $CRITICAL != 0 ]; then
      if [ $CODE -gt $CRITICAL ] && [ $CRITICAL != 0 ]; then
        STATE=$STATE_CRITICAL
      elif [ $CODE -gt $WARNING ] && [ $WARNING != 0 ]; then
        STATE=$STATE_WARNING
      else
        STATE=$STATE_OK
      fi
    else
      STATE=$STATE_OK
    fi

    if [ -n "$PARAMETERS" ]; then
      DESCRIPTION="The service '$SERVICE' with the parameters ('$PARAMETERS') is running | number=$CODE;$WARNING;$CRITICAL;0"
    else
      DESCRIPTION="The service '$SERVICE' is running | number=$CODE;$WARNING;$CRITICAL;0"
    fi
  else
    DESCRIPTION="The service '$SERVICE' is not running | number=0;$WARNING;$CRITICAL;0"
    STATE=$STATE_CRITICAL
  fi
fi

echo $DESCRIPTION
exit $STATE